
// Class-name based CSS

// Transitions
@import './transitions/transition-fade';
@import './transitions/transition-hide';
@import './transitions/transition-scale-fade';

// Atomic, reusable style properties
//
// NOTE
//
// - About utilities
//     - Utilities are small CSS classes that encapsulates a commonly used, atomic style behavior
//     - Many utilities come with viewport variations that let's you apply them responsively
//     - Utilities usually have corresponding mixins (with matching names), and should be written using them
//     - Both utilities and mixins have their place, don't try to use only one or the other
//     - Utility classnames are NOT prefixed, but they could be (e.g. .u-hide-under-small)
//         - This is ok, as the naming convention is still consistent with only minor exceptions for convenience)
//     - Utilities can be used in many ways in component style selectors, not just directly attaching style to an element
//         - Example: see how .control is used in Toggle component
// - When using using utilities in components
//     - It's harder for parent components to override child component styles
//     - It's harder for a developer to get an overview of component styles, since some behavior is not apparent in the style section
// - Payload
//     - These CSS utilities WILL be printed in the output CSS files, and will increase the payload users have to download
//     - However, duplicating this code in components via mixins or otherwise increases the size much more
//     - You should make a conscious choice of what kind of styling code you want to write in your components
//     - It's tempting to enable these to make hacking easier, but you should think about end-users and production code more

// Complex utility classes
@import './utilities-composed/utility-bodytext';
@import './utilities-composed/utility-control';
@import './utilities-composed/utility-inverse';
@import './utilities-composed/utility-row';

// Atomic utility classes
// NOTE: These are loaded after the complex ones so they can be used to override things easier, as in CSS the source order matters

// @import './utilities-base/utility-align';
// @import './utilities-base/utility-background';
// @import './utilities-base/utility-box-model';
@import './utilities-base/utility-buffer';
@import './utilities-base/utility-clear';
// @import './utilities-base/utility-cursor';
@import './utilities-base/utility-display';
// @import './utilities-base/utility-fill';
@import './utilities-base/utility-hide';
// @import './utilities-base/utility-keep';
// @import './utilities-base/utility-limit';
@import './utilities-base/utility-pad';
// @import './utilities-base/utility-position';
// @import './utilities-base/utility-pull';
// @import './utilities-base/utility-push';
// @import './utilities-base/utility-radius';
@import './utilities-base/utility-rhythm';
// @import './utilities-base/utility-separate';
// @import './utilities-base/utility-type';
